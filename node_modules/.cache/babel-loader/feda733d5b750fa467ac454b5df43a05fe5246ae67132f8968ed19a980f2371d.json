{"ast":null,"code":"var _jsxFileName = \"/Users/rahulchahal/react tutorial/my-react-app/src/components/DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DarkModeToggle = () => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  useEffect(() => {\n    // Check if dark mode preference is saved in local storage\n    const savedDarkMode = localStorage.getItem('darkMode');\n    setIsDarkMode(savedDarkMode === 'true');\n  }, []);\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    // Save the dark mode preference to local storage\n    localStorage.setItem('darkMode', newMode);\n    // You can also apply additional logic here to change the theme of your website\n    // For example, by adding/removing a CSS class from the body element\n    document.body.classList.toggle('dark-mode', newMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: toggleDarkMode,\n    children: isDarkMode ? 'Light Mode' : 'Dark Mode'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(DarkModeToggle, \"bUs4CHDjU8AH+ZZYt8wlh4bHppI=\");\n_c = DarkModeToggle;\nexport default DarkModeToggle;\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DarkModeToggle","_s","isDarkMode","setIsDarkMode","savedDarkMode","localStorage","getItem","toggleDarkMode","newMode","setItem","document","body","classList","toggle","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rahulchahal/react tutorial/my-react-app/src/components/DarkModeToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst DarkModeToggle = () => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  useEffect(() => {\n    // Check if dark mode preference is saved in local storage\n    const savedDarkMode = localStorage.getItem('darkMode');\n    setIsDarkMode(savedDarkMode === 'true');\n  }, []);\n\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    // Save the dark mode preference to local storage\n    localStorage.setItem('darkMode', newMode);\n    // You can also apply additional logic here to change the theme of your website\n    // For example, by adding/removing a CSS class from the body element\n    document.body.classList.toggle('dark-mode', newMode);\n  };\n\n  return (\n    <button onClick={toggleDarkMode}>\n      {isDarkMode ? 'Light Mode' : 'Dark Mode'}\n    </button>\n  );\n};\n\nexport default DarkModeToggle;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACtDH,aAAa,CAACC,aAAa,KAAK,MAAM,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,OAAO,GAAG,CAACN,UAAU;IAC3BC,aAAa,CAACK,OAAO,CAAC;IACtB;IACAH,YAAY,CAACI,OAAO,CAAC,UAAU,EAAED,OAAO,CAAC;IACzC;IACA;IACAE,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEL,OAAO,CAAC;EACtD,CAAC;EAED,oBACET,OAAA;IAAQe,OAAO,EAAEP,cAAe;IAAAQ,QAAA,EAC7Bb,UAAU,GAAG,YAAY,GAAG;EAAW;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEb,CAAC;AAAClB,EAAA,CAxBID,cAAc;AAAAoB,EAAA,GAAdpB,cAAc;AA0BpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}